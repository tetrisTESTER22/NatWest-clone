const { Telegraf, Markup } = require('telegraf');
const fs = require('fs').promises;
const path = require('path');

const bot = new Telegraf('8115112625:AAF7aQuiqBU_XlZypAw5CvkaU5o6x1uP8fY');

const credentials = {
  admin1: { password: 'pass1', tenant: 'ad1' },
  admin2: { password: 'pass2', tenant: 'ad2' },
  admin3: { password: 'pass3', tenant: 'ad3' },
  admin4: { password: 'pass4', tenant: 'ad4' },
  admin5: { password: 'pass5', tenant: 'ad5' },
  admin6: { password: 'pass6', tenant: 'ad6' },
};

const loginSteps = new Map();
const sessions = new Map();
const addTxSteps = new Map();
const clearGroupSteps = new Map();
const updateAccountSteps = new Map();

function getPaths(tenant) {
  return {
    account: path.join(__dirname, `../src/data/${tenant}/account.json`),
    transactions: path.join(__dirname, `../src/data/${tenant}/transactions.json`),
  };
}

async function saveJSON(filePath, data) {
  await fs.writeFile(filePath, JSON.stringify(data, null, 2));
}

bot.start((ctx) => {
  const id = ctx.from.id;
  if (sessions.has(id)) {
    ctx.reply(`‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –∫–∞–∫ ${sessions.get(id)}`);
    showMainMenu(ctx);
  } else {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', Markup.keyboard([['üîê –í–æ–π—Ç–∏']]).resize());
  }
});

bot.hears('üîê –í–æ–π—Ç–∏', (ctx) => {
  loginSteps.set(ctx.from.id, { step: 'login' });
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:');
});

bot.hears('üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', async (ctx) => {
  const tenant = sessions.get(ctx.from.id);
  const { account } = getPaths(tenant);
  try {
    const data = JSON.parse(await fs.readFile(account, 'utf-8'));
    const msg = `Account Info:\nTitle: ${data.title}\nNumber: ${data.accountNumber}\nSort Code: ${data.sortCode}\nBalance: ¬£${data.balance}`;
    return ctx.reply(msg);
  } catch {
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å account.json');
  }
});

bot.hears('üìã –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', async (ctx) => {
  const tenant = sessions.get(ctx.from.id);
  const { transactions } = getPaths(tenant);
  try {
    const txs = JSON.parse(await fs.readFile(transactions, 'utf-8'));
    if (txs.length === 0) return ctx.reply('‚ùó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç');

    let msg = '–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
    txs.forEach(group => {
      msg += `\n${group.label}:\n`;
      group.transactions.forEach(tx => {
        msg += `- ${tx.name} | ¬£${parseFloat(tx.amount).toFixed(2)} | ${tx.icon}\n`;
      });
    });

    return ctx.reply(msg);
  } catch {
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  }
});

bot.hears('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', (ctx) => {
  updateAccountSteps.set(ctx.from.id, { step: 'title' });
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:');
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ Pending', (ctx) => startAddTxFlow(ctx, 'Pending'));
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ Today', (ctx) => startAddTxFlow(ctx, 'Today'));

bot.hears('üßπ –û—á–∏—Å—Ç–∏—Ç—å Pending', async (ctx) => startClearGroupFlow(ctx, 'Pending'));
bot.hears('üßπ –û—á–∏—Å—Ç–∏—Ç—å Today', async (ctx) => startClearGroupFlow(ctx, 'Today'));

function startClearGroupFlow(ctx, groupName) {
  const id = ctx.from.id;
  clearGroupSteps.set(id, groupName);
  return clearGroup(ctx, groupName);
}

async function clearGroup(ctx, groupName) {
  const tenant = sessions.get(ctx.from.id);
  const { transactions } = getPaths(tenant);
  try {
    const txs = JSON.parse(await fs.readFile(transactions, 'utf-8'));
    for (const group of txs) {
      if (group.label.toLowerCase() === groupName.toLowerCase()) {
        group.transactions = [];
      }
    }
    await saveJSON(transactions, txs);
    return ctx.reply(`üßπ –ì—Ä—É–ø–ø–∞ ${groupName} –æ—á–∏—â–µ–Ω–∞.`);
  } catch {
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä—É–ø–ø—ã');
  }
}

function showMainMenu(ctx) {
  return ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', Markup.keyboard([
    ['üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'üìã –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'],
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ Pending', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ Today'],
    ['üßπ –û—á–∏—Å—Ç–∏—Ç—å Pending', 'üßπ –û—á–∏—Å—Ç–∏—Ç—å Today'],
    ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']
  ]).resize());
}

function startAddTxFlow(ctx, group) {
  const id = ctx.from.id;
  addTxSteps.set(id, { step: 'name', group });
  ctx.reply(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ${group}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
}

bot.on('text', async (ctx) => {
  const id = ctx.from.id;
  const text = ctx.message.text.trim();

  if (loginSteps.has(id)) {
    const state = loginSteps.get(id);
    if (state.step === 'login') {
      state.login = text;
      state.step = 'password';
      loginSteps.set(id, state);
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    }
    if (state.step === 'password') {
      const creds = credentials[state.login];
      if (creds && creds.password === text) {
        sessions.set(id, creds.tenant);
        loginSteps.delete(id);
        ctx.reply(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ ${state.login}`);
        return showMainMenu(ctx);
      } else {
        loginSteps.delete(id);
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  }

  if (!sessions.has(id)) return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /start');
  const tenant = sessions.get(id);
  const { account, transactions } = getPaths(tenant);

  if (updateAccountSteps.has(id)) {
    const state = updateAccountSteps.get(id);
    const data = JSON.parse(await fs.readFile(account, 'utf-8'));

    if (state.step === 'title') {
      state.title = text;
      state.step = 'number';
      updateAccountSteps.set(id, state);
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:');
    }
    if (state.step === 'number') {
      state.accountNumber = text;
      state.step = 'sort';
      updateAccountSteps.set(id, state);
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ sort code:');
    }
    if (state.step === 'sort') {
      state.sortCode = text;
      state.step = 'balance';
      updateAccountSteps.set(id, state);
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å:');
    }
    if (state.step === 'balance') {
      const balance = parseFloat(text);
      if (isNaN(balance)) return ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ');
      data.title = state.title;
      data.accountNumber = state.accountNumber;
      data.sortCode = state.sortCode;
      data.balance = balance;
      await saveJSON(account, data);
      updateAccountSteps.delete(id);
      ctx.reply('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω');
      return showMainMenu(ctx);
    }
  }

  if (addTxSteps.has(id)) {
    const state = addTxSteps.get(id);
    if (state.step === 'name') {
      state.name = text;
      state.step = 'amount';
      addTxSteps.set(id, state);
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    }
    if (state.step === 'amount') {
      const amount = parseFloat(text);
      if (isNaN(amount)) return ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      state.amount = amount;
      state.step = 'icon';
      addTxSteps.set(id, state);
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É (–ø—É—Ç—å –∫ svg –∏–ª–∏ emoji):');
    }
    if (state.step === 'icon') {
      const icon = text;
      const txs = JSON.parse(await fs.readFile(transactions, 'utf-8'));
      const section = txs.find((s) => s.label.toLowerCase() === state.group.toLowerCase());
      const newTx = { name: state.name, amount: state.amount, icon };
      if (section) {
        section.transactions.push(newTx);
      } else {
        txs.push({ label: state.group, transactions: [newTx] });
      }
      await saveJSON(transactions, txs);
      addTxSteps.delete(id);
      ctx.reply(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ${state.group}`);
      return showMainMenu(ctx);
    }
  }

  if (text === '/account') {
    try {
      const data = JSON.parse(await fs.readFile(account, 'utf-8'));
      const msg = `Account Info:\nTitle: ${data.title}\nNumber: ${data.accountNumber}\nSort Code: ${data.sortCode}\nBalance: ¬£${data.balance}`;
      return ctx.reply(msg);
    } catch {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å account.json');
    }
}
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥');
